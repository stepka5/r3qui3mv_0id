
# meta developer: @r3qui3mv_0ib
from .. import loader, utils
from asyncio import sleep
import random
import logging
from datetime import datetime

log = logging.getLogger(__name__)


@loader.tds
class DoxMod(loader.Module):
    """prank dox v1.0"""
    strings = {
        "name": "r3qui3mv_0id dox",
        "usage": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .doxlist.",
    }

    def __init__(self):
        pass

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.channel_username = "dox_hikka"
        self.channel_entity = None
        self.data = {}
        self.data_loaded = False

        await self.load_data_from_channel()

    async def load_data_from_channel(self):
        try:
            self.channel_entity = await self.client.get_entity(self.channel_username)
            messages = []
            async for message in self.client.iter_messages(self.channel_entity, limit=1000000):
                messages.append(message)

            previous_data = self.data.copy()
            self.data = {}
            added_counts = {}

            for message in messages:
                if message.message:
                    lines = message.message.splitlines()
                    if len(lines) > 1:
                        category = lines[0].strip()
                        data = [line.strip() for line in lines[1:] if line.strip()]

                        self.data[category] = data

                        added_counts[category] = 0
                        if category not in previous_data:
                            added_counts[category] = len(data)
                        else:
                            added_counts[category] = len(set(data) - set(previous_data[category]))

            self.data_loaded = True
            log.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.channel_username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

            return added_counts

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            self.data = {}
            self.data_loaded = False
            return None

    def get_random_value(self, category):
        if category in self.data and self.data[category]:
            return random.choice(self.data[category])
        else:
            log.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    @loader.command(alias='dox')
    async def dox(self, message):
        """ - —Å–¥–µ–ª–∞—Ç—å —Ñ—ç–π–∫–æ–≤—ã–π –¥–æ–∫—Å –Ω–∞—Ö—É–π."""
        if not self.data_loaded:
            await utils.answer(message, "‚ö†Ô∏è <b>–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.</b>")
            return

        if not self.data:
            await utils.answer(message, "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.</b>")
            return

        await utils.answer(message, "üëÅÔ∏è <b>–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...</b>")
        await sleep(0.5)

        search_phases = [
            ("üåê –û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", ["–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π...", "–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤...", "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö..."]),
            ("üïµÔ∏è‚Äç‚ôÄÔ∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", ["–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π...", "–°–≤—è–∑–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...", "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è..."]),
            ("üîí –£—Ç–µ—á–∫–∏", ["–°–ª–∏—Ç—ã–µ –±–∞–∑—ã...", "–ü–∞—Ä–æ–ª–∏...", "–°–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...", ""]),
            ("ü§ñ –ê–Ω–∞–ª–∏–∑", ["–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...", "–ó–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏...", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."])
        ]

        progress_symbols = ["|", "/", "-", "\\"]
        num_symbols = len(progress_symbols)

        for phase_name, sub_phases in search_phases:
            await utils.answer(message, f"üëÅÔ∏è <b>{phase_name}</b>")
            await sleep(0.2)

            for sub_phase in sub_phases:
                progress = 0
                symbol_index = 0
                start_time = datetime.now()
                animation_duration = 1.0

                while progress < 100:
                    elapsed_time = (datetime.now() - start_time).total_seconds()
                    if elapsed_time >= animation_duration:
                        progress = 100
                        break

                    progress = min(100, (elapsed_time / animation_duration) * 100)

                    current_symbol = progress_symbols[symbol_index % num_symbols]

                    await utils.answer(message,
                                        f"üëÅÔ∏è <b>{phase_name}</b> <i>[{int(progress)}%]</i>\n‚îî <i>{sub_phase}</i> {current_symbol}")

                    remaining_time = animation_duration - elapsed_time
                    sleep_duration = min(0.05, remaining_time / 20)
                    await sleep(sleep_duration)

                    symbol_index += 1

            await utils.answer(message, f"üëÅÔ∏è <b>{phase_name}</b> <i>[100%]</i>")
            await sleep(0.2)

        await utils.answer(message, "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b> ü§ñ")

        phone_number = self.get_random_value("phone_numbers")
        country = self.get_random_value("countries")
        region = self.get_random_value("regions")

        first_names_male = 'first_names_male'
        first_names_female = 'first_names_female'
        last_names_female = 'last_names_female'
        last_names_male = 'last_names_male'
        middle_names = 'middle_names'
        addresses = 'addresses'
        birth_dates = 'birth_dates'
        emails = 'emails'
        facebooks = 'facebooks'
        odnoklassniki = 'odnoklassniki'
        vkontakte = 'vkontakte'
        instagram = 'instagram'
        telegram_nicknames = 'telegram_nicknames'
        funny_facts = 'funny_facts'
        operators = 'operators'

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω
        num_names = random.randint(2, 4)  # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω (–æ—Ç 2 –¥–æ 4)
        possible_names = []
        for _ in range(num_names):
            gender = random.choice(['male', 'female'])
            if gender == 'male':
                possible_names.append(self.get_random_value(first_names_male))
            else:
                possible_names.append(self.get_random_value(first_names_female))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –§–ò–û
        num_full_names = random.randint(1, 3)  # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –§–ò–û (–æ—Ç 1 –¥–æ 3)
        possible_full_names = []
        for _ in range(num_full_names):
            last_name = self.get_random_value(last_names_female)  # –ò–ª–∏ last_names_male, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—É–∂—Å–∫–∏—Ö –§–ò–û
            first_name = self.get_random_value(first_names_female)  # –ò–ª–∏ first_names_male
            middle_name = self.get_random_value(middle_names)
            possible_full_names.append(f"{last_name} {first_name} {middle_name}")


        result_message = (
            f"üì±\n"
            f"‚îú –ù–æ–º–µ—Ä: {phone_number}\n"
            f"‚îú –°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"‚îú –†–µ–≥–∏–æ–Ω: {region}\n"
            f"‚îú –û–ø–µ—Ä–∞—Ç–æ—Ä: {self.get_random_value(operators)}\n\n"
            f"üìì –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞:\n"
            f"‚îî {', '.join(possible_names)}\n\n"
            f"üë§ –í–æ–∑–º–æ–∂–Ω–æ–µ –§–ò–û: \n"
            f"  " + "\n  ".join(possible_full_names) + "\n\n"
            f"üè† –ê–¥—Ä–µ—Å:\n"
            f"{self.get_random_value(addresses)}\n\n"
            f"üè• –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {', '.join([self.get_random_value(birth_dates) for _ in range(min(random.randint(1, 2), 2))])}\n"
            f"üì™ Email: {', '.join([self.get_random_value(emails) for _ in range(min(random.randint(1, 2), 2))])}\n\n"
            f"üë§ Facebook: {self.get_random_value(facebooks)}\n"
            f"üë®‚Äçü¶≥ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {self.get_random_value(odnoklassniki)}\n"
            f"üåê –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {self.get_random_value(vkontakte)}\n"
            f"üì∑ Instagram: {self.get_random_value(instagram)}\n"
            f"üìß Telegram: {self.get_random_value(telegram_nicknames)}\n"
            f"üè™ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {random.randint(0, 5)} —à—Ç\n\n"
            f"üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {random.randint(1, 10000)} –æ–±–µ–∑—å—è–Ω\n"
            f"üèÖ –†–µ–ø—É—Ç–∞—Ü–∏—è: ({random.randint(0, 25)})üëç ({random.randint(0, 15)})üëé \n"
            f"üòÇ –ó–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç: {self.get_random_value(funny_facts)}\n"
            f"üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        )
        await utils.answer(message, f"{result_message}")

    @loader.command(alias="doxlist")
    async def doxlist(self, message):
        """–æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        await utils.answer(message, "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞...</b>")

        added_counts = await self.load_data_from_channel()

        if self.data_loaded and added_counts is not None:
            report = "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n"
            for category, count in added_counts.items():
                report += f"‚îú {category}: {count}\n"
            await utils.answer(message, report)
        else:
            await utils.answer(message, "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.</b>")
