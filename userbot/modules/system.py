import os
import sys
import asyncio
from datetime import datetime
from telethon import events

class SystemModule:
    def __init__(self, bot):
        self.bot = bot
        self.setup_commands()
        
    def setup_commands(self):
        commands = [
            ("stop", self.stop_cmd, "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
            ("restart", self.restart_cmd, "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("update", self.update_cmd, "–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ —Å GitHub"),
            ("logs", self.logs_cmd, "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"),
            ("status", self.status_cmd, "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ]
        
        for cmd, handler, desc in commands:
            self.bot.register_command(cmd, handler, desc)
    
    async def stop_cmd(self, event):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await event.edit("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        await self.bot.stop()
        
    async def restart_cmd(self, event):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await event.edit("üîÉ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        await self.bot.restart()
        
    async def update_cmd(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞"""
        await event.edit("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        update_available, commits = await self.bot.check_updates()
        
        if update_available:
            await event.edit(f"‚è¨ –ó–∞–≥—Ä—É–∂–∞—é {commits} –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            if await self.bot.update_bot():
                await event.edit("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                await self.bot.restart()
            else:
                await event.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        else:
            await event.edit("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    async def logs_cmd(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        try:
            if not os.path.exists("userbot.log"):
                await event.edit("üìú –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            with open("userbot.log", "r") as f:
                logs = f.read()[-4000:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                
            if len(logs) < 100:
                await event.edit("üìú –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –æ—á–µ–Ω—å –º–∞–ª–æ")
                return
                
            await event.edit(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n```\n{logs}\n```")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            
    async def status_cmd(self, event):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            from psutil import Process, virtual_memory
            process = Process(os.getpid())
            
            status_text = (
                "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
                f"‚ñ∏ –ó–∞–ø—É—â–µ–Ω: {'–î–∞' if self.bot.is_running else '–ù–µ—Ç'}\n"
                f"‚ñ∏ –ü–∞–º—è—Ç—å: {process.memory_info().rss / 1024 / 1024:.2f} MB\n"
                f"‚ñ∏ CPU: {process.cpu_percent()}%\n"
                f"‚ñ∏ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - process.create_time()}\n"
                f"‚ñ∏ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {'–î–∞' if await self.bot.check_subscription() else '–ù–µ—Ç'}"
            )
            
            await event.edit(status_text)
        except ImportError:
            await event.edit("‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil: pip install psutil")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def setup(bot):
    SystemModule(bot)
