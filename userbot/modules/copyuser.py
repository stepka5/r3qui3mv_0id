import os
import io
import requests
from telethon import types, functions
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest, UpdateEmojiStatusRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon.errors import UsernameNotOccupiedError, UsernameInvalidError

class CopyUserModule:
    def __init__(self, bot):
        self.bot = bot
        self.backup_data = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.bot.register_command(
            cmd="copyuser",
            handler=self.copy_profile,
            description="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (reply/@username/ID)"
        )
        self.bot.register_command(
            cmd="backupme",
            handler=self.backup_profile,
            description="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
        )
        self.bot.register_command(
            cmd="restoreme",
            handler=self.restore_profile,
            description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        )

    async def upload_to_0x0(self, photo_bytes):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥"""
        try:
            files = {'file': ('photo.png', photo_bytes)}
            response = requests.post('https://0x0.st', files=files)
            return response.text.strip()
        except Exception:
            return None

    async def copy_profile(self, event):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = event.raw_text.split()[1:] if len(event.raw_text.split()) > 1 else []
        reply = await event.get_reply_message()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if args:
                try:
                    user = await self.bot.client.get_entity(
                        int(args[0]) if args[0].isdigit() else args[0]
                    )
                except ValueError:
                    await event.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
            elif reply:
                user = await reply.get_sender()
            else:
                await event.edit("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (reply/@username/ID)")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            full = await self.bot.client(GetFullUserRequest(user.id))
            user_info = full.users[0]
            me = await self.bot.client.get_me()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä
            if full.full_user.profile_photo:
                try:
                    photos = await self.bot.client.get_profile_photos(user.id)
                    if photos:
                        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                        await self.bot.client(DeletePhotosRequest(
                            await self.bot.client.get_profile_photos("me")
                        ))
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
                        photo = await self.bot.client.download_media(photos[0])
                        await self.bot.client(UploadProfilePhotoRequest(
                            file=await self.bot.client.upload_file(photo)
                        ))
                        os.remove(photo)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await self.bot.client(UpdateProfileRequest(
                first_name=user_info.first_name or "",
                last_name=user_info.last_name or "",
                about=full.full_user.about[:70] if full.full_user.about else "",
            ))

            # –ö–æ–ø–∏—Ä—É–µ–º emoji-—Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º)
            if hasattr(user_info, 'emoji_status') and user_info.emoji_status and me.premium:
                try:
                    await self.bot.client(
                        UpdateEmojiStatusRequest(
                            emoji_status=user_info.emoji_status
                        )
                    )
                except Exception:
                    pass
            
            await event.edit("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")

        except (UsernameNotOccupiedError, UsernameInvalidError):
            await event.edit("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π username!")
        except Exception as e:
            await event.edit(f"üòµ –û—à–∏–±–∫–∞: {str(e)}")

    async def backup_profile(self, event):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            user = await self.bot.client.get_me()
            full = await self.bot.client(GetFullUserRequest(user.id))
            user_info = full.users[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar_url = None
            photos = await self.bot.client.get_profile_photos(user.id)
            if photos:
                photo = await self.bot.client.download_media(photos[0], bytes)
                avatar_url = await self.upload_to_0x0(photo)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º emoji-—Å—Ç–∞—Ç—É—Å
            emoji_status_id = None
            if hasattr(user_info, 'emoji_status') and user_info.emoji_status:
                emoji_status_id = user_info.emoji_status.document_id

            # –§–æ—Ä–º–∏—Ä—É–µ–º backup
            self.backup_data = {
                "first_name": user_info.first_name,
                "last_name": user_info.last_name,
                "about": full.full_user.about,
                "avatar_url": avatar_url,
                "emoji_status_id": emoji_status_id
            }
            
            await event.edit(
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üì∏ –ê–≤–∞—Ç–∞—Ä: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω' if avatar_url else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üé≠ Emoji —Å—Ç–∞—Ç—É—Å: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω' if emoji_status_id else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )

        except Exception as e:
            await event.edit(f"üòµ –û—à–∏–±–∫–∞: {str(e)}")

    async def restore_profile(self, event):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if not self.backup_data:
                await event.edit("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
                return

            me = await self.bot.client.get_me()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            if self.backup_data.get("avatar_url"):
                try:
                    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
                    photos = await self.bot.client.get_profile_photos('me')
                    await self.bot.client(DeletePhotosRequest(photos))
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
                    response = requests.get(self.backup_data["avatar_url"])
                    avatar_bytes = io.BytesIO(response.content)
                    
                    await self.bot.client(UploadProfilePhotoRequest(
                        file=await self.bot.client.upload_file(avatar_bytes)
                    ))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await self.bot.client(UpdateProfileRequest(
                first_name=self.backup_data.get("first_name", ""),
                last_name=self.backup_data.get("last_name", ""),
                about=self.backup_data.get("about", "")
            ))

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º emoji-—Å—Ç–∞—Ç—É—Å
            if self.backup_data.get("emoji_status_id") and me.premium:
                try:
                    await self.bot.client(
                        UpdateEmojiStatusRequest(
                            emoji_status=types.EmojiStatus(
                                document_id=self.backup_data["emoji_status_id"]
                            )
                        )
                    )
                except Exception:
                    pass

            await event.edit("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        except Exception as e:
            await event.edit(f"üòµ –û—à–∏–±–∫–∞: {str(e)}")

def setup(bot):
    CopyUserModule(bot)