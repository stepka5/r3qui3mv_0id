import asyncio
import random
import logging
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest

logger = logging.getLogger(__name__)

class MemesModule:
    def __init__(self, bot):
        self.bot = bot
        self.channels = {
            "—à—É—Ç–∫–∞": "@shutkimemes",
            "–∂–æ—Å–∫–∏–π–º–µ–º": "@joskiimems", 
            "—Å–º–µ—à–Ω–æ–π–º–µ–º": "@smeshnoymems",
            "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞": "@smehuatinka",
            "–∞–Ω–µ–∫–¥–æ—Ç": "@anekdotsmemes",
            "–∫—Ä—É–∂–æ–∫": "@ponnnnnit"
        }
        self.channel_entities = {}
        self.memes_cache = {}
        self.circles_cache = []
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∑—É
        self.register_commands()
        
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        asyncio.create_task(self.initialize_after_connect())

    def register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        commands = {
            "—à—É—Ç–∫–∞": ("–°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞", self.joke_cmd),
            "–∂–æ—Å–∫–∏–π–º–µ–º": ("–ñ–µ—Å—Ç–∫–∏–π –º–µ–º", self.hard_meme_cmd),
            "—Å–º–µ—à–Ω–æ–π–º–µ–º": ("–°–º–µ—à–Ω–æ–π –º–µ–º", self.funny_meme_cmd),
            "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞": ("–°–º–µ—à–Ω–∞—è –≤—Å—è—á–∏–Ω–∞", self.funny_stuff_cmd),
            "–∞–Ω–µ–∫–¥–æ—Ç": ("–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", self.anecdote_cmd),
            "–∫—Ä—É–∂–æ–∫": ("–°–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫", self.circle_cmd),
            "–º–µ–º–ª–∏—Å—Ç": ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤", self.memelist_cmd),
            "–æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à": ("–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤", self.update_cache_cmd)
        }
        
        for cmd, (desc, handler) in commands.items():
            self.bot.register_command(cmd, handler, desc)

    async def initialize_after_connect(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        await self.bot.client.connect()  # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è Memes...")
        await self.load_channel_entities()
        await self.cache_messages()
        logger.info("–ú–æ–¥—É–ª—å Memes –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def load_channel_entities(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö"""
        tasks = []
        for name, username in self.channels.items():
            tasks.append(self.get_channel_entity(username))
        
        results = await asyncio.gather(*tasks)
        
        for i, (name, _) in enumerate(self.channels.items()):
            if results[i]:
                self.channel_entities[name] = results[i]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {name}")

    async def get_channel_entity(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ entity –∫–∞–Ω–∞–ª–∞"""
        try:
            channel = await self.bot.client(GetFullChannelRequest(username))
            return channel.chats[0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
            return None

    async def cache_messages(self):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        tasks = []
        for name, entity in self.channel_entities.items():
            if name == "–∫—Ä—É–∂–æ–∫":
                tasks.append(self.get_circles(entity))
            else:
                tasks.append(self.get_channel_messages(entity))
        
        results = await asyncio.gather(*tasks)
        
        for i, name in enumerate(self.channel_entities):
            if name == "–∫—Ä—É–∂–æ–∫":
                self.circles_cache = results[i]
            else:
                self.memes_cache[name] = results[i]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results[i])} –ø–æ—Å—Ç–æ–≤ –∏–∑ {name}")

    async def get_channel_messages(self, entity):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            messages = []
            async for message in self.bot.client.iter_messages(entity, limit=200):
                if message.text or message.media:
                    messages.append(message)
            return messages
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

    async def get_circles(self, entity):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤ (–≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫)"""
        try:
            circles = []
            async for message in self.bot.client.iter_messages(entity, limit=100):
                if message.video_note:
                    circles.append(message)
            return circles
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä—É–∂–∫–æ–≤: {e}")
            return []

    async def send_random_post(self, event, category):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        if category not in self.memes_cache or not self.memes_cache[category]:
            await event.edit("üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
            
        post = random.choice(self.memes_cache[category])
        await self.bot.client.send_message(
            event.chat_id,
            post.text or "üì¶ –ú–µ–º",
            file=post.media,
            reply_to=event.reply_to_msg_id
        )
        await event.delete()

    async def send_random_circle(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞"""
        if not self.circles_cache:
            await event.edit("üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤")
            return
            
        circle = random.choice(self.circles_cache)
        await self.bot.client.send_message(
            event.chat_id,
            file=circle.video_note,
            reply_to=event.reply_to_msg_id
        )
        await event.delete()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def joke_cmd(self, event):
        await self.send_random_post(event, "—à—É—Ç–∫–∞")

    async def hard_meme_cmd(self, event):
        await self.send_random_post(event, "–∂–æ—Å–∫–∏–π–º–µ–º")

    async def funny_meme_cmd(self, event):
        await self.send_random_post(event, "—Å–º–µ—à–Ω–æ–π–º–µ–º")

    async def funny_stuff_cmd(self, event):
        await self.send_random_post(event, "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")

    async def anecdote_cmd(self, event):
        await self.send_random_post(event, "–∞–Ω–µ–∫–¥–æ—Ç")

    async def circle_cmd(self, event):
        await self.send_random_circle(event)

    async def memelist_cmd(self, event):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤"""
        stats = "\n".join(
            f"{name}: {len(posts)}" 
            for name, posts in self.memes_cache.items()
        )
        stats += f"\n–ö—Ä—É–∂–∫–∏: {len(self.circles_cache)}"
        await event.edit(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats}")

    async def update_cache_cmd(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞"""
        await event.edit("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–µ—à...")
        await self.cache_messages()
        await event.edit("‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω!")

def setup(bot):
    MemesModule(bot)