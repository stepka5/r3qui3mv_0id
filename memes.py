
# meta developer: @r3qui3mv_0ib

import asyncio
import random
import json
from .. import loader, utils
from telethon.tl.functions.channels import JoinChannelRequest, GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import InputPeerChannel, InputPeerUser
from telethon.errors import MessageNotModifiedError, UserNotParticipantError
from telethon.tl.functions.channels import GetParticipantRequest, InviteToChannelRequest
from telethon.tl.types import ChannelParticipantCreator, ChannelParticipantAdmin, ChannelParticipant
from telethon.utils import get_display_name
from telethon import types
from telethon.tl.functions.messages import EditMessageRequest


class MemesMod(loader.Module):
    """–º–æ–¥—É–ª—å memes —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    strings = {
        "name": "Memes",
        "channel_error": "<b>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.</b>",
        "no_posts": "<b>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.</b>",
        "join_error": "<b>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.</b>",
        "not_subscribed": "<b>–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href='https://t.me/EbanutiyAlex'>@EbanutiyAlex</a></b>",
        "help_message": """
        <b>–º–æ–¥—É–ª—å Memes</b>
        .—à—É—Ç–∫–∞ - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ {channel_username} —Å #—à—É—Ç–∫–∞
        .–∂–æ—Å–∫–∏–π–º–µ–º - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ {channel_username} —Å #–∂–æ—Å–∫–∏–π–º–µ–º
        .—Å–º–µ—à–Ω–æ–π–º–µ–º - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ {channel_username} —Å #—Å–º–µ—à–Ω–æ–π–º–µ–º
        .—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞ - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ {channel_username} —Å #—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞
        .–∞–Ω–µ–∫–¥–æ—Ç - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ {channel_username} —Å #–∞–Ω–µ–∫–¥–æ—Ç
        .–∫—Ä—É–∂–æ–∫ - –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫—Ä—É–∂–æ–∫ —Å –∫–∞–Ω–∞–ª–∞ ponnnnnit
        .–º–µ–º–ª–∏—Å—Ç - –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–º–∞–º
        .–æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–µ—à
        –∫–∞–Ω–∞–ª —Å –º–µ–º–∞–º–∏ <a href='https://t.me/EbanutiyAlex'>@EbanutiyAlex</a> - –ø–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (—ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å –ª—É—á—à–µ)
        """,
        "memelist_message": "<b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–º–∞–º –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel_username}:</b>\n—à—É—Ç–æ–∫: {jokes_count}\n–∂–æ—Å–∫–∏—Ö –º–µ–º–æ–≤: {hard_memes_count}\n—Å–º–µ—à–Ω—ã—Ö –º–µ–º–æ–≤: {funny_memes_count}\n—Å–º–µ—Ö—É—è—Ç–∏–Ω: {funny_stuff_count}\n–∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {anecdotes_count}\n–∫—Ä—É–∂–∫–æ–≤: {circles_count}",
        "no_circles": "<b>–Ω–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∫—Ä—É–∂–∫–æ–≤.</b>",
        "all_memes_shown": "<b>–í—Å–µ –º–µ–º—ã —Å —ç—Ç–∏–º —Ö—ç—à—Ç–µ–≥–æ–º –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
        "cache_updated": "<b>–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n–î–æ–±–∞–≤–ª–µ–Ω–æ:\n–®—É—Ç–æ–∫: {jokes_added}\n–ñ–æ—Å–∫–∏—Ö –º–µ–º–æ–≤: {hard_memes_added}\n–°–º–µ—à–Ω—ã—Ö –º–µ–º–æ–≤: {funny_memes_added}\n–°–º–µ—Ö—É—è—Ç–∏–Ω: {funny_stuff_added}\n–ê–Ω–µ–∫–¥–æ—Ç–æ–≤: {anecdotes_added}\n–ö—Ä—É–∂–∫–æ–≤: {circles_added}",
        "processing_message": "<emoji document_id={loading_emoji}>‚åõ</emoji> <b>–ü—Ä–∏—Å—ã–ª–∞—é –≤–∞–º {request_type}</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]
        self.channel_username = "@EbanutiyAlex"
        self.channel_id = None
        self.entity = None
        self.help = self.strings["help_message"].format(
            channel_username=self.channel_username
        )
        self.hashtags = ["#—à—É—Ç–∫–∞", "#–∂–æ—Å–∫–∏–π–º–µ–º", "#—Å–º–µ—à–Ω–æ–π–º–µ–º", "#–∞–Ω–µ–∫–¥–æ—Ç", "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞"]
        self.circle_channel_username = "@ponnnnnit"  # –ö–∞–Ω–∞–ª —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
        self.circle_channel_id = None
        self.circle_entity = None
        self.sent_post_ids = {}  # Dictionary to store sent post IDs for each hashtag
        self.sent_circle_ids = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤
        self.is_ready = False  # –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
        self.all_messages_cache = {}  # –ö–µ—à –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.data_file = "memes_data.json" # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.emojis = [
            "5283184741904833341",  # üëå
            "5377686056915181180",  # üíó
            "5318853178282746002",  # üñï
            "5317051744444751648",  # ü•¥
            "5319214110154432904",  # ü§î
            "5285208874092091461",  # ‚òÄÔ∏è
            "5317051744444751648",  # ü•¥
            "5285019156796692745",  # üòÅ
            "5283012801479073926",  # üßè‚Äç‚ôÄÔ∏è
        ]
        self.loading_emojis = [
            "5402355073458123173",  # ‚åõÔ∏è
            "5287734473775918473",  # üîº
            "5406745015365943482",  # ‚¨áÔ∏è
            "5386367538735104399",  # ‚åõ
        ]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.is_ready = False

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.load_data()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –º–µ–º–æ–≤
            full_channel_info = await client(GetFullChannelRequest(channel=self.channel_username))
            self.entity = full_channel_info.chats[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç chats - —ç—Ç–æ –æ–±—ã—á–Ω–æ –∫–∞–Ω–∞–ª
            self.channel_id = self.entity.id

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ (GetFullChannelRequest): {e}")
            print(self.strings["channel_error"])
            return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        try:
            await client(JoinChannelRequest(self.channel_username))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
            print(self.strings["join_error"])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
        try:
            circle_channel_info = await client(GetFullChannelRequest(channel=self.circle_channel_username))
            self.circle_entity = circle_channel_info.chats[0]
            self.circle_channel_id = self.circle_entity.id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏: {e}")
            self.circle_entity = None
            self.circle_channel_id = None

        self.help = self.strings["help_message"].format(
            channel_username=self.channel_username
        )

        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö, –∫–µ—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.cache_all_messages()

        self.is_ready = True

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(self.data_file, "r") as f:
                data = json.load(f)
                self.sent_post_ids = data.get("sent_post_ids", {})
                self.sent_circle_ids = set(data.get("sent_circle_ids", []))  # Convert back to set
        except FileNotFoundError:
            self.sent_post_ids = {}
            self.sent_circle_ids = set()
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
            self.sent_post_ids = {}
            self.sent_circle_ids = set()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª."""
        data = {
            "sent_post_ids": self.sent_post_ids,
            "sent_circle_ids": list(self.sent_circle_ids),  # Convert to list for JSON serialization
        }
        try:
            with open(self.data_file, "w") as f:
                json.dump(data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def cache_all_messages(self):
        """–ö–µ—à–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤."""
        self.all_messages_cache[self.channel_id] = await self.get_all_messages(self.entity)
        if self.circle_entity:
            self.all_messages_cache[self.circle_channel_id] = await self.get_all_messages(self.circle_entity)

    async def get_all_messages(self, peer, hashtag=None, only_circles=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ peer, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ hashtag –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫—Ä—É–∂–∫–∞–º."""
        all_messages = []
        offset_id = 0
        while True:
            try:
                messages = await self.client(
                    GetHistoryRequest(
                        peer=peer,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        limit=100,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                        max_id=0,
                        min_id=0,
                        hash=0,
                    )
                )
                if not messages.messages:
                    break
                all_messages.extend(messages.messages)
                if len(messages.messages) < 100:
                    break
                offset_id = messages.messages[-1].id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break

        if hashtag:
            return [m for m in all_messages if m.raw_text and hashtag in m.raw_text]
        elif only_circles:
            return [m for m in all_messages if hasattr(m, 'video_note') and m.video_note is not None]
        else:
            return all_messages

    async def get_random_post(self, hashtag):
        """–ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º."""
        try:
            if hashtag not in self.sent_post_ids:
                self.sent_post_ids[hashtag] = set()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.channel_id not in self.all_messages_cache:
                print("–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã. –û–±–Ω–æ–≤–ª—è—é –∫–µ—à...")
                await self.cache_all_messages()
                if self.channel_id not in self.all_messages_cache:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞.")
                    return None

            messages = self.all_messages_cache[self.channel_id]
            filtered_messages = [
                m for m in messages if m.raw_text and hashtag in m.raw_text and m.id not in self.sent_post_ids[hashtag]
            ]

            if not filtered_messages:
                # Reset sent IDs if all messages have been shown
                self.sent_post_ids[hashtag] = set()
                filtered_messages = [
                    m for m in messages if m.raw_text and hashtag in m.raw_text and m.id not in self.sent_post_ids[hashtag]
                ]
                if not filtered_messages:
                    return None  # No messages with this hashtag at all

            post = random.choice(filtered_messages)
            self.sent_post_ids[hashtag].add(post.id)  # Add the post ID to the set for this hashtag
            self.save_data() # Save data after sending
            return post

        except Exception as e:
            print(e)
            return None

    async def send_random_post(self, message, hashtag, request_type):
        """–≤—ã—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º –∏ —É–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É."""
        if not self.is_ready:
            await utils.answer(message, "–ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
            try:
                user = await self.client.get_entity(message.sender_id)
                await self.client(
                    GetParticipantRequest(
                        channel=self.entity,
                        participant=user,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º InputPeerUser(message.sender_id)
                    )
                )
            except Exception as e:
                # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                await utils.answer(message, self.strings["not_subscribed"])
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            loading_emoji = random.choice(self.loading_emojis)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                    self.strings["processing_message"].format(request_type=request_type.replace('–≤–∞—à', '–≤–∞–º'), loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1.5 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(1.5)

            post = await self.get_random_post(hashtag)
            if post:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                text = post.message or ""

                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
                random_emoji = random.choice(self.emojis)

                # –£–¥–∞–ª—è–µ–º —Ö—ç—à—Ç–µ–≥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if hashtag == "#–∂–æ—Å–∫–∏–π–º–µ–º":
                    text = text.replace("#–∂–æ—Å–∫–∏–π–º–µ–º", "").strip()
                    new_text = f"<emoji document_id={random_emoji}>üï∫</emoji> <b>–∂–æ—Å–∫–∏–π –º–µ–º</b>\n\n{text}" if text else f"<emoji document_id={random_emoji}>üï∫</emoji> <b>–∂–æ—Å–∫–∏–π –º–µ–º</b>"
                elif hashtag == "#—Å–º–µ—à–Ω–æ–π–º–µ–º":
                    text = text.replace("#—Å–º–µ—à–Ω–æ–π–º–µ–º", "").strip()
                    new_text = f"<emoji document_id={random_emoji}>üï∫</emoji> <b>—Å–º–µ—à–Ω–æ–π –º–µ–º</b>\n\n{text}" if text else f"<emoji document_id={random_emoji}>üï∫</emoji> <b>—Å–º–µ—à–Ω–æ–π –º–µ–º</b>"
                elif hashtag == "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞":
                    text = text.replace("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞", "").strip()
                    new_text = f"<emoji document_id={random_emoji}>ü§°</emoji> <b>—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞</b>\n\n{text}" if text else f"<emoji document_id={random_emoji}>ü§°</emoji> <b>—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞</b>"
                else:
                    text = text.replace(hashtag, "").strip()
                    new_text = text  # –î–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏ —à—É—Ç–æ–∫ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º —Ö—ç—à—Ç–µ–≥

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.client.send_message(
                    message.chat_id,
                    new_text,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–æ–π —Ö—ç—à—Ç–µ–≥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    file=post.media if hasattr(post, 'media') and post.media else None,
                    reply_to=message.reply_to_msg_id  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                )

                # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                await message.delete()

            else:
                try:
                    await self.client.edit_message(
                        message.chat_id,
                        message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                        self.strings["all_memes_shown"]
                    )
                except MessageNotModifiedError:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    pass

        except Exception as e:
            print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    async def count_posts(self, hashtag):
        """—Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.channel_id not in self.all_messages_cache:
            await self.cache_all_messages()
            if self.channel_id not in self.all_messages_cache:
                return 0

        messages = self.all_messages_cache[self.channel_id]
        return len([m for m in messages if m.raw_text and hashtag in m.raw_text])

    async def count_circles(self, channel_id=None):
        """—Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–∂–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª–µ."""
        if channel_id is None:
            channel_id = self.circle_channel_id  # Use default if none provided

        if not self.circle_entity:
            return 0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if channel_id not in self.all_messages_cache:
            await self.cache_all_messages()
            if channel_id not in self.all_messages_cache:
                return 0

        messages = self.all_messages_cache[channel_id]
        return len([m for m in messages if hasattr(m, 'video_note') and m.video_note is not None])

    @loader.command(ru_doc="–≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–º–∞–º")
    async def –º–µ–º–ª–∏—Å—Ç(self, message):
        """–≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–º–∞–º."""
        if not self.is_ready:
            await utils.answer(message, "–ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        circles_count = await self.count_circles()  # –°—á–∏—Ç–∞–µ–º –∫—Ä—É–∂–∫–∏

        await utils.answer(
            message,
            self.strings["memelist_message"].format(
                channel_username=self.channel_username,
                jokes_count=jokes_count,
                hard_memes_count=hard_memes_count,
                funny_memes_count=funny_memes_count,
                funny_stuff_count=funny_stuff_count,
                anecdotes_count=anecdotes_count,
                circles_count=circles_count,
            ),
        )

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —à—É—Ç–∫—É —Å –∫–∞–Ω–∞–ª–∞")
    async def —à—É—Ç–∫–∞(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —à—É—Ç–∫—É."""
        await self.send_random_post(message, "#—à—É—Ç–∫–∞", "—à—É—Ç–∫—É")

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç –∂–æ—Å–∫–∏–π –º–µ–º —Å –∫–∞–Ω–∞–ª–∞")
    async def –∂–æ—Å–∫–∏–π–º–µ–º(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç –∂–æ—Å–∫–∏–π –º–µ–º."""
        await self.send_random_post(message, "#–∂–æ—Å–∫–∏–π–º–µ–º", "–∂–æ—Å–∫–∏–π –º–µ–º")

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –º–µ–º —Å –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—à–Ω–æ–π–º–µ–º(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –º–µ–º."""
        await self.send_random_post(message, "#—Å–º–µ—à–Ω–æ–π–º–µ–º", "—Å–º–µ—à–Ω–æ–π –º–µ–º")

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç —Å–º–µ—Ö—É—è—Ç–∏–Ω—É —Å –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—Ö—É—è—Ç–∏–Ω–∞(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç —Å–º–µ—Ö—É—è—Ç–∏–Ω—É."""
        await self.send_random_post(message, "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞", "—Å–º–µ—Ö—É—è—Ç–∏–Ω—É")

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç —Å –∫–∞–Ω–∞–ª–∞")
    async def –∞–Ω–µ–∫–¥–æ—Ç(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç."""
        await self.send_random_post(message, "#–∞–Ω–µ–∫–¥–æ—Ç", "–∞–Ω–µ–∫–¥–æ—Ç")

    @loader.command(ru_doc="–≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫—Ä—É–∂–æ–∫ —Å –∫–∞–Ω–∞–ª–∞")
    async def –∫—Ä—É–∂–æ–∫(self, message):
        """–≤—ã—Å—ã–ª–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫—Ä—É–∂–æ–∫."""
        if not self.is_ready:
            await utils.answer(message, "–ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if not self.circle_entity:
            await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏.")
            return

        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            loading_emoji = random.choice(self.loading_emojis)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                    self.strings["processing_message"].format(request_type="–∫—Ä—É–∂–æ–∫", loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1.5 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(1.5)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.circle_channel_id not in self.all_messages_cache:
                print("–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –∫—Ä—É–∂–∫–∞–º–∏ –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã. –û–±–Ω–æ–≤–ª—è—é –∫–µ—à...")
                await self.cache_all_messages()
                if self.circle_channel_id not in self.all_messages_cache:
                    try:
                        await self.client.edit_message(
                            message.chat_id,
                            message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –∫—Ä—É–∂–∫–∞–º–∏."
                        )
                    except MessageNotModifiedError:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    return

            all_circles = [m for m in self.all_messages_cache[self.circle_channel_id] if hasattr(m, 'video_note') and m.video_note is not None]
            filtered_circles = [circle for circle in all_circles if circle.id not in self.sent_circle_ids]

            if not filtered_circles:
                # Reset sent IDs if all circles have been shown
                self.sent_circle_ids = set()
                filtered_circles = [circle for circle in all_circles if circle.id not in self.sent_circle_ids]
                if not filtered_circles:
                    try:
                        await self.client.edit_message(
                            message.chat_id,
                            message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                            self.strings["no_circles"]
                        )
                    except MessageNotModifiedError:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    return

            circle = random.choice(filtered_circles)
            self.sent_circle_ids.add(circle.id)
            self.save_data() # Save data after sending

            await self.client.send_message(
                message.chat_id,
                file=circle.video_note,
                reply_to=message.reply_to_msg_id,
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            await message.delete()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä—É–∂–∫–∞: {e}")
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä—É–∂–∫–∞: {e}"
                )
            except MessageNotModifiedError:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass

    @loader.command(ru_doc="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–µ—à")
    async def –æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à(self, message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–µ—à."""
        if not self.is_ready:
            await utils.answer(message, "–ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            new_messages = await self.get_all_messages(self.entity)
            new_circle_messages = await self.get_all_messages(self.circle_entity, only_circles=True) if self.circle_entity else []

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            jokes_added = 0
            hard_memes_added = 0
            funny_memes_added = 0
            funny_stuff_added = 0
            anecdotes_added = 0
            circles_added = 0

            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ
            if self.channel_id in self.all_messages_cache:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ)
                cached_ids = {m.id for m in self.all_messages_cache[self.channel_id]}
                new_messages_to_cache = [m for m in new_messages if m.id not in cached_ids]

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—ç—à
                for m in new_messages_to_cache:
                    if m.raw_text:
                        if "#—à—É—Ç–∫–∞" in m.raw_text:
                            jokes_added += 1
                        if "#–∂–æ—Å–∫–∏–π–º–µ–º" in m.raw_text:
                            hard_memes_added += 1
                        if "#—Å–º–µ—à–Ω–æ–π–º–µ–º" in m.raw_text:
                            funny_memes_added += 1
                        if "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞" in m.raw_text:
                            funny_stuff_added += 1
                        if "#–∞–Ω–µ–∫–¥–æ—Ç" in m.raw_text:
                            anecdotes_added += 1
                self.all_messages_cache[self.channel_id].extend(new_messages_to_cache)
            else:
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –µ—â–µ –Ω–µ—Ç –≤ –∫—ç—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.all_messages_cache[self.channel_id] = new_messages
                for m in new_messages:
                    if m.raw_text:
                        if "#—à—É—Ç–∫–∞" in m.raw_text:
                            jokes_added += 1
                        if "#–∂–æ—Å–∫–∏–π–º–µ–º" in m.raw_text:
                            hard_memes_added += 1
                        if "#—Å–º–µ—à–Ω–æ–π–º–µ–º" in m.raw_text:
                            funny_memes_added += 1
                        if "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞" in m.raw_text:
                            funny_stuff_added += 1
                        if "#–∞–Ω–µ–∫–¥–æ—Ç" in m.raw_text:
                            anecdotes_added += 1

            # –î–ª—è –∫–∞–Ω–∞–ª–∞ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
            if self.circle_entity:
                if self.circle_channel_id in self.all_messages_cache:
                    cached_circle_ids = {m.id for m in self.all_messages_cache[self.circle_channel_id]}
                    new_circle_messages_to_cache = [m for m in new_circle_messages if m.id not in cached_circle_ids]
                    circles_added = len(new_circle_messages_to_cache)
                    self.all_messages_cache[self.circle_channel_id].extend(new_circle_messages_to_cache)

                else:
                    self.all_messages_cache[self.circle_channel_id] = new_circle_messages
                    circles_added = len(new_circle_messages)
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                    self.strings["cache_updated"].format(
                        jokes_added=jokes_added,
                        hard_memes_added=hard_memes_added,
                        funny_memes_added=funny_memes_added,
                        funny_stuff_added=funny_stuff_added,
                        anecdotes_added=anecdotes_added,
                        circles_added=circles_added,
                    )
                )
            except MessageNotModifiedError:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}"
                )
            except MessageNotModifiedError:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
        finally:
            self.save_data()  # Save data after updating cache
