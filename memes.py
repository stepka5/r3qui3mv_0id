
# meta developer: @r3qui3mv_0ib, based on @C0dwiz

import asyncio
import random
import json
from .. import loader, utils
from telethon.tl.functions.channels import JoinChannelRequest, GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import InputPeerChannel
from telethon.errors import MessageNotModifiedError
from telethon import types

@loader.tds
class MemesMod(loader.Module):
    """–ú–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–≤"""

    strings = {
        "name": "–ú–µ–º—ã",
        "channel_error": "<b>–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.</b>",
        "no_posts": "<b>–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —ç—Ç–∏–º —Ö—ç—à—Ç–µ–≥–æ–º.</b>",
        "join_error": "<b>–ù–µ –º–æ–≥—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É.</b>",
        "not_subscribed": "<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @EbanutiyAlex, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É</b>",
        "help_message": """
        <b>–ú–æ–¥—É–ª—å –ú–µ–º—ã</b>
        .—à—É—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @EbanutiyAlex —Å #—à—É—Ç–∫–∞
        .–∂–æ—Å–∫–∏–π–º–µ–º - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @EbanutiyAlex —Å #–∂–æ—Å–∫–∏–π–º–µ–º
        .—Å–º–µ—à–Ω–æ–π–º–µ–º - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @EbanutiyAlex —Å #—Å–º–µ—à–Ω–æ–π–º–µ–º
        .—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @EbanutiyAlex —Å #—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞
        .–∞–Ω–µ–∫–¥–æ—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @EbanutiyAlex —Å #–∞–Ω–µ–∫–¥–æ—Ç
        .–∫—Ä—É–∂–æ–∫ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ @ponnnnnit
        .–º–µ–º–ª–∏—Å—Ç - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤
        .–æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à - –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤
        """,
        "memelist_message": "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª–µ @EbanutiyAlex:</b>\n–®—É—Ç–∫–∏: {jokes_count}\n–ñ–µ—Å—Ç–∫–∏–µ –º–µ–º—ã: {hard_memes_count}\n–°–º–µ—à–Ω—ã–µ –º–µ–º—ã: {funny_memes_count}\n–°–º–µ—à–Ω–∞—è –≤—Å—è—á–∏–Ω–∞: {funny_stuff_count}\n–ê–Ω–µ–∫–¥–æ—Ç—ã: {anecdotes_count}\n–ö—Ä—É–∂–∫–∏: {circles_count}",
        "no_circles": "<b>–ù–µ—Ç –∫—Ä—É–∂–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ.</b>",
        "all_memes_shown": "<b>–í—Å–µ –º–µ–º—ã —Å —ç—Ç–∏–º —Ö—ç—à—Ç–µ–≥–æ–º –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
        "processing_message": "<emoji document_id={loading_emoji}>‚åõ</emoji> <b>–û—Ç–ø—Ä–∞–≤–∫–∞ {request_type}...</b>",
        "cache_updated": "<b>–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n–î–æ–±–∞–≤–ª–µ–Ω–æ:\n–®—É—Ç–∫–∏: {jokes_added}\n–ñ—ë—Å—Ç–∫–∏–µ –º–µ–º—ã: {hard_memes_added}\n–°–º–µ—à–Ω—ã–µ –º–µ–º—ã: {funny_memes_added}\n–°–º–µ—à–Ω–∞—è –≤—Å—è—á–∏–Ω–∞: {funny_stuff_added}\n–ê–Ω–µ–∫–¥–æ—Ç—ã: {anecdotes_added}\n–ö—Ä—É–∂–∫–∏: {circles_added}",
        "sending_circle": "<emoji document_id={loading_emoji}>‚åõ</emoji> <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–∂–∫–∞...</b>",
        "memelist": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤",
        "update_cache": "–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à",
    }

    def __init__(self):
        self.name = self.strings["name"]
        self.memes_channel_username = "@EbanutiyAlex"
        self.memes_channel_id = None
        self.memes_entity = None
        self.circles_channel_username = "@ponnnnnit"
        self.circles_channel_id = None
        self.circles_entity = None
        self.help = self.strings["help_message"]
        self.sent_post_ids = {}
        self.sent_circle_ids = set()
        self.memes_cache = {}  # –ö–µ—à –¥–ª—è –º–µ–º–æ–≤ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
        self.circles_cache = []
        self.emojis = [
            "5283184741904833341",  # üëå
            "5377686056915181180",  # üíó
            "5318853178282746002",  # üñï
            "5317051744444751648",  # ü•¥
            "5319214110154432904",  # ü§î
            "5285208874092091461",  # ‚òÄÔ∏è
            "5317051744444751648",  # ü•¥
            "5285019156796692745",  # üòÅ
            "5283012801479073926",  # üßè‚Äç‚ôÄÔ∏è
        ]
        self.loading_emojis = [
            "5402355073458123173",  # ‚åõÔ∏è
            "5287734473775918473",  # üîº
            "5406745015365943482",  # ‚¨áÔ∏è
            "5386367538735104399",  # ‚åõ
        ]
        self.special_emoji = "5316880323710034698" #üï∫ emoji id
        self.data_file = "memes_data.json"  # Keep for sent_post_ids
        self.circles_data_file = "circles_data.json"  # New file for circles
        self.hashtags = ["#—à—É—Ç–∫–∞", "#–∂–æ—Å–∫–∏–π–º–µ–º", "#—Å–º–µ—à–Ω–æ–π–º–µ–º", "#–∞–Ω–µ–∫–¥–æ—Ç", "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞"]  # –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

        self.load_data()

        # Get memes channel info
        try:
            channel_info = await client(GetFullChannelRequest(self.memes_channel_username))
            self.memes_entity = channel_info.chats[0]
            self.memes_channel_id = self.memes_entity.id
        except Exception as e:
            print(f"Error getting memes channel info: {e}")
            print(self.strings["channel_error"])

        # Get circles channel info
        try:
            channel_info = await client(GetFullChannelRequest(self.circles_channel_username))
            self.circles_entity = channel_info.chats[0]
            self.circles_channel_id = self.circles_entity.id
        except Exception as e:
            print(f"Error getting circles channel info: {e}")
            self.circles_entity = None
            self.circles_channel_id = None

        # Join channels
        try:
            await client(JoinChannelRequest(self.memes_channel_username))
        except Exception as e:
            print(f"Error joining memes channel: {e}")
            print(self.strings["join_error"])
        if self.circles_entity:
            try:
                await client(JoinChannelRequest(self.circles_channel_username))
            except Exception as e:
                print(f"Error joining circles channel: {e}")

        # Cache messages
        await self.cache_all_messages()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # Load data from JSON
            with open(self.data_file, "r") as f:
                data = json.load(f)
                self.sent_post_ids = {k: set(v) for k, v in data.get("sent_post_ids", {}).items()}
                self.sent_circle_ids = set(data.get("sent_circle_ids", [])) # Load circles as set
        except (FileNotFoundError, json.JSONDecodeError):
            self.sent_post_ids = {}
            self.sent_circle_ids = set()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        # Save data to JSON
        data = {
            "sent_post_ids": {k: list(v) for k, v in self.sent_post_ids.items()},
            "sent_circle_ids": list(self.sent_circle_ids),
        }
        try:
            with open(self.data_file, "w") as f:
                json.dump(data, f)
        except Exception as e:
            print(f"Error saving sent_post_ids to JSON: {e}")

    async def cache_all_messages(self):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        if self.memes_entity:
            self.memes_cache = {}  # Reset cache
            for hashtag in self.hashtags:
                self.memes_cache[hashtag] = await self.get_all_messages(self.memes_entity, hashtag=hashtag)
        if self.circles_entity:
            self.circles_cache = await self.get_all_messages(self.circles_entity, only_circles=True)

    async def get_all_messages(self, peer, hashtag=None, only_circles=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        all_messages = []
        offset_id = 0
        while True:
            try:
                messages = await self.client(
                    GetHistoryRequest(
                        peer=peer,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        limit=100,
                        max_id=0,
                        min_id=0,
                        hash=0,
                    )
                )
                if not messages.messages:
                    break
                all_messages.extend(messages.messages)
                if len(messages.messages) < 100:
                    break
                offset_id = messages.messages[-1].id
            except Exception as e:
                print(f"Error getting messages: {e}")
                break

        if hashtag:
            return [m for m in all_messages if m.raw_text and hashtag in m.raw_text]
        elif only_circles:
            return [m for m in all_messages if hasattr(m, 'video_note') and m.video_note is not None]
        else:
            return all_messages

    async def get_random_post(self, hashtag):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º"""
        if hashtag not in self.memes_cache or not self.memes_cache[hashtag]:
            print(f"–ö—ç—à –º–µ–º–æ–≤ –¥–ª—è {hashtag} –ø—É—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            await self.cache_all_messages()
            if hashtag not in self.memes_cache or not self.memes_cache[hashtag]:
                return None

        filtered_messages = [
            m
            for m in self.memes_cache[hashtag]
            if m.id not in self.sent_post_ids.get(hashtag, set())
        ]
        if not filtered_messages:
            # Reset sent IDs if all messages have been shown
            self.sent_post_ids[hashtag] = set()
            filtered_messages = [
                m
                for m in self.memes_cache[hashtag]
                if m.id not in self.sent_post_ids.get(hashtag, set())
            ]
            if not filtered_messages:
                return None

        post = random.choice(filtered_messages)
        if hashtag not in self.sent_post_ids:
            self.sent_post_ids[hashtag] = set()
        self.sent_post_ids[hashtag].add(post.id)
        self.save_data()  # Save data after sending
        return post

    async def get_random_circle(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞"""
        if not self.circles_cache:
            print("–ö—ç—à –∫—Ä—É–∂–∫–æ–≤ –ø—É—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            await self.cache_all_messages()
            if not self.circles_cache:
                return None

        filtered_circles = [
            c for c in self.circles_cache if c.id not in self.sent_circle_ids
        ]
        if not filtered_circles:
            # Reset sent IDs if all circles have been shown
            self.sent_circle_ids = set()
            filtered_circles = [
                c for c in self.circles_cache if c.id not in self.sent_circle_ids
            ]
            if not filtered_circles:
                return None

        circle = random.choice(filtered_circles)
        self.sent_circle_ids.add(circle.id)
        self.save_data()
        return circle

    async def send_random_post(self, message, hashtag, request_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º"""
        try:
            # Check if the user is subscribed to the channel
            try:
                channel = await self.client.get_entity(self.memes_channel_username)
                if isinstance(channel, types.User):
                    await utils.answer(message, self.strings["not_subscribed"])
                    return
            except Exception:
                await utils.answer(message, self.strings["not_subscribed"])
                return

            # Choose a random loading emoji
            loading_emoji = random.choice(self.loading_emojis)

            # Send processing message (EDIT the original command message)
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,
                    self.strings["processing_message"].format(request_type=request_type, loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                pass  # Message wasn't modified (maybe it's the same as before)

            post = await self.get_random_post(hashtag)
            if post:
                # Choose a random emoji
                random_emoji = random.choice(self.emojis)

                # Format the text
                text = post.message or ""
                text = text.replace(hashtag, "").strip()

                if hashtag in ["#–∂–æ—Å–∫–∏–π–º–µ–º", "#—Å–º–µ—à–Ω–æ–π–º–µ–º"]:
                    new_text = f"<emoji document_id={random_emoji}>{chr(0x200d)}</emoji> <b>{request_type}</b>\n\n{text}"
                elif hashtag == "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞":
                    new_text = f"<emoji document_id={random_emoji}>{chr(0x200d)}</emoji> <b>{request_type}</b>\n\n{text}"
                else: # joke or anecdote
                    new_text = f"<emoji document_id={random_emoji}></emoji> {text}"  # No special emoji for jokes and anecdotes

                # Send the message
                await self.client.send_message(
                    message.chat_id,
                    new_text,
                    file=post.media if hasattr(post, "media") else None,
                    reply_to=message.reply_to_msg_id,
                )
                await message.delete()

            else:
                 try:
                    await self.client.edit_message(
                        message.chat_id,
                        message.id,
                        self.strings["all_memes_shown"]
                    )
                 except MessageNotModifiedError:
                      pass

        except Exception as e:
            print(f"Error sending post: {e}")

    async def send_random_circle(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞"""
        if not self.circles_entity:
            await utils.answer(message, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª —Å –∫—Ä—É–∂–∫–∞–º–∏.")
            return

        try:
            # Choose a random loading emoji
            loading_emoji = random.choice(self.loading_emojis)

             # Send processing message (EDIT the original command message)
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,
                    self.strings["sending_circle"].format(loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                pass  # Message wasn't modified (maybe it's the same as before)

            circle = await self.get_random_circle()
            if circle:
                await self.client.send_message(
                    message.chat_id,
                    file=circle.video_note,
                    reply_to=message.reply_to_msg_id,
                )
                await message.delete()

            else:
                await utils.answer(message, self.strings["no_circles"])

        except Exception as e:
            print(f"Error sending circle: {e}")

    async def count_posts(self, hashtag):
        """–ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º"""
        if hashtag not in self.memes_cache:
            return 0
        return len(self.memes_cache[hashtag])

    async def count_circles(self):
        """–ü–æ–¥—Å—á–µ—Ç –∫—Ä—É–∂–∫–æ–≤"""
        return len(self.circles_cache)

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —à—É—Ç–∫–∞(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "#—à—É—Ç–∫–∞", "—à—É—Ç–∫—É")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∂–µ—Å—Ç–∫–∏–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∂–æ—Å–∫–∏–π–º–µ–º(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∂–µ—Å—Ç–∫–∏–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "#–∂–æ—Å–∫–∏–π–º–µ–º", "–∂–µ—Å—Ç–∫–∏–π –º–µ–º")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—à–Ω–æ–π–º–µ–º(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "#—Å–º–µ—à–Ω–æ–π–º–µ–º", "—Å–º–µ—à–Ω–æ–π –º–µ–º")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–º–µ—à–Ω—É—é –≤—Å—è—á–∏–Ω—É –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—Ö—É—è—Ç–∏–Ω–∞(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–º–µ—à–Ω—É—é –≤—Å—è—á–∏–Ω—É –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞", "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∞–Ω–µ–∫–¥–æ—Ç(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "#–∞–Ω–µ–∫–¥–æ—Ç", "–∞–Ω–µ–∫–¥–æ—Ç")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∫—Ä—É–∂–æ–∫(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_circle(message)

    @loader.command(ru_doc="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤")
    async def –º–µ–º–ª–∏—Å—Ç(self, message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤"""
        jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        circles_count = await self.count_circles()

        await utils.answer(
            message,
            self.strings["memelist_message"].format(
                jokes_count=jokes_count,
                hard_memes_count=hard_memes_count,
                funny_memes_count=funny_memes_count,
                funny_stuff_count=funny_stuff_count,
                anecdotes_count=anecdotes_count,
                circles_count=circles_count,
            ),
        )

    @loader.command(ru_doc="–æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤")
    async def –æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤"""
        if not self.memes_entity:
            await utils.answer(message, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª —Å –º–µ–º–∞–º–∏.")
            return

        # Get current counts
        jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        circles_count = await self.count_circles()

        await self.cache_all_messages()

        # Get new counts
        new_jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        new_hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        new_funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        new_funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        new_anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        new_circles_count = await self.count_circles()

        # Calculate added counts
        jokes_added = new_jokes_count - jokes_count
        hard_memes_added = new_hard_memes_count - hard_memes_count
        funny_memes_added = new_funny_memes_count - funny_memes_count
        funny_stuff_added = new_funny_stuff_count - funny_stuff_count
        anecdotes_added = new_anecdotes_count - anecdotes_count
        circles_added = new_circles_count - circles_count

        await utils.answer(
            message,
            self.strings["cache_updated"].format(
                jokes_added=jokes_added,
                hard_memes_added=hard_memes_added,
                funny_memes_added=funny_memes_added,
                funny_stuff_added=funny_stuff_added,
                anecdotes_added=anecdotes_added,
                circles_added=circles_added,
            ),
        )

    @loader.command(ru_doc="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤")
    async def –º–µ–º–ª–∏—Å—Ç(self, message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤"""
        jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        circles_count = await self.count_circles()

        await utils.answer(
            message,
            self.strings["memelist_message"].format(
                jokes_count=jokes_count,
                hard_memes_count=hard_memes_count,
                funny_memes_count=funny_memes_count,
                funny_stuff_count=funny_stuff_count,
                anecdotes_count=anecdotes_count,
                circles_count=circles_count,
            ),
        )

    @loader.command(ru_doc="–æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤")
    async def –æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤"""
        if not self.memes_entity:
            await utils.answer(message, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª —Å –º–µ–º–∞–º–∏.")
            return

        # Get current counts
        jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        circles_count = await self.count_circles()

        await self.cache_all_messages()

        # Get new counts
        new_jokes_count = await self.count_posts("#—à—É—Ç–∫–∞")
        new_hard_memes_count = await self.count_posts("#–∂–æ—Å–∫–∏–π–º–µ–º")
        new_funny_memes_count = await self.count_posts("#—Å–º–µ—à–Ω–æ–π–º–µ–º")
        new_funny_stuff_count = await self.count_posts("#—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
        new_anecdotes_count = await self.count_posts("#–∞–Ω–µ–∫–¥–æ—Ç")
        new_circles_count = await self.count_circles()

        # Calculate added counts
        jokes_added = new_jokes_count - jokes_count
        hard_memes_added = new_hard_memes_count - hard_memes_count
        funny_memes_added = new_funny_memes_count - funny_memes_count
        funny_stuff_added = new_funny_stuff_count - funny_stuff_count
        anecdotes_added = new_anecdotes_count - anecdotes_count
        circles_added = new_circles_count - circles_count

        await utils.answer(
            message,
            self.strings["cache_updated"].format(
                jokes_added=jokes_added,
                hard_memes_added=hard_memes_added,
                funny_memes_added=funny_memes_added,
                funny_stuff_added=funny_stuff_added,
                anecdotes_added=anecdotes_added,
                circles_added=circles_added,
            ),
        )
