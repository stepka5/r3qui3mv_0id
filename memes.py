# meta developer: @r3qui3mv_0ib

import asyncio
import random
import json
import logging
#from .. import loader  
from hikka import loader 
from .. import utils
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import MessageNotModifiedError

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


@loader.tds
class MemesMod(loader.Module):
    """–ú–µ–º–∞—Å—ã"""

    strings = {
        "name": "–ú–µ–º—ã",
        "channel_error": "<b>–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ:</b> <code>{}</code>",
        "no_posts": "<b>–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.</b>",
        "help_message": """
        <b>–ú–æ–¥—É–ª—å –ú–µ–º—ã</b>
        .—à—É—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @shutkimemes
        .–∂–æ—Å–∫–∏–π–º–µ–º - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @joskiimems
        .—Å–º–µ—à–Ω–æ–π–º–µ–º - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @smeshnoymems
        .—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @smehuatinka
        .–∞–Ω–µ–∫–¥–æ—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @anekdotsmemes
        .–∫—Ä—É–∂–æ–∫ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ @ponnnnnit
        .–º–µ–º–ª–∏—Å—Ç - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤
        .–æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à - –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤
        """,
        "memelist_message": "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤:</b>\n–®—É—Ç–∫–∏: {jokes_count}\n–ñ–µ—Å—Ç–∫–∏–µ –º–µ–º—ã: {hard_memes_count}\n–°–º–µ—à–Ω—ã–µ –º–µ–º—ã: {funny_memes_count}\n–°–º–µ—à–Ω–∞—è –≤—Å—è—á–∏–Ω–∞: {funny_stuff_count}\n–ê–Ω–µ–∫–¥–æ—Ç—ã: {anecdotes_count}\n–ö—Ä—É–∂–∫–∏: {circles_count}",
        "no_circles": "<b>–ù–µ—Ç –∫—Ä—É–∂–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ.</b>",
        "all_memes_shown": "<b>–í—Å–µ –º–µ–º—ã –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
        "processing_message": "<emoji document_id={loading_emoji}>‚åõ</emoji> <b>–û—Ç–ø—Ä–∞–≤–∫–∞ {request_type}...</b>",
        "cache_updated": "<b>–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n–î–æ–±–∞–≤–ª–µ–Ω–æ:\n–®—É—Ç–∫–∏: {jokes_added}\n–ñ—ë—Å—Ç–∫–∏–µ –º–µ–º—ã: {hard_memes_added}\n–°–º–µ—à–Ω—ã–µ –º–µ–º—ã: {funny_memes_added}\n–°–º–µ—à–Ω–∞—è –≤—Å—è—á–∏–Ω–∞: {funny_stuff_added}\n–ê–Ω–µ–∫–¥–æ—Ç—ã: {anecdotes_added}\n–ö—Ä—É–∂–∫–∏: {circles_added}",
        "sending_circle": "<emoji document_id={loading_emoji}>‚åõ</emoji> <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–∂–∫–∞...</b>",
        "memelist": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤",
        "update_cache": "–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à",
    }

    def __init__(self):
        self.name = self.strings["name"]
        self.config = {
            "emojis": [
                "5283184741904833341",  # üëå
                "5377686056915181180",  # üíó
                "5318853178282746002",  # üñï
                "5317051744444751648",  # ü•¥
                "5319214110154432904",  # ü§î
                "5285208874092091461",  # ‚òÄÔ∏è
                "5317051744444751648",  # ü•¥
                "5285019156796692745",  # üòÅ
                "5283012801479073926",  # üßè‚Äç‚ôÄÔ∏è
            ],
            "loading_emojis": [
                "5402355073458123173",  # ‚åõÔ∏è
                "5287734473775918473",  # üîº
                "5406745015365943482",  # ‚¨áÔ∏è
                "5386367538735104399",  # ‚åõ
            ],
            "data_file": "memes_data.json",
            "channel_mapping": {
                "—à—É—Ç–∫–∞": "@shutkimemes",
                "–∂–æ—Å–∫–∏–π–º–µ–º": "@joskiimems",
                "—Å–º–µ—à–Ω–æ–π–º–µ–º": "@smeshnoymems",
                "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞": "@smehuatinka",
                "–∞–Ω–µ–∫–¥–æ—Ç": "@anekdotsmemes",
                "–∫—Ä—É–∂–æ–∫": "@ponnnnnit"
            },
        }
        self.channel_entities = {}  
        self.memes_cache = {}  
        self.circles_cache = []
        self.sent_post_ids = {}  
        self.sent_circle_ids = set()

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

        self.load_data()
        await self.get_all_channel_entities()  
        await self.cache_all_messages()  

    async def get_channel_entity(self, channel_username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ entity –∫–∞–Ω–∞–ª–∞ –ø–æ –µ–≥–æ username"""
        try:
            channel_info = await self.client(GetFullChannelRequest(channel_username))
            return channel_info.chats[0]
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_username}: {e}")
            return None

    async def get_all_channel_entities(self):
        """–ü–æ–ª—É—á–∞–µ–º entities –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ self.channel_entities"""
        tasks = [self.get_channel_entity(channel_username) for channel_username in self.config["channel_mapping"].values()]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for key, channel_username in self.config["channel_mapping"].items():
            result = results[list(self.config["channel_mapping"].keys()).index(key)]
            if isinstance(result, Exception):
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {result}")
            elif result:
                self.channel_entities[key] = result
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}. –ü—Ä–æ–ø—É—Å–∫.")

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.config["data_file"], "r") as f:
                data = json.load(f)
                self.sent_post_ids = data.get("sent_post_ids", {})
                self.sent_circle_ids = set(data.get("sent_circle_ids", []))
        except (FileNotFoundError, json.JSONDecodeError):
            self.sent_post_ids = {}
            self.sent_circle_ids = set()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        data = {
            "sent_post_ids": self.sent_post_ids,
            "sent_circle_ids": list(self.sent_circle_ids),
        }
        try:
            with open(self.config["data_file"], "w") as f:
                json.dump(data, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON: {e}")

    async def cache_all_messages(self):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        tasks = []
        for key, entity in self.channel_entities.items():
            if key == "–∫—Ä—É–∂–æ–∫":
                tasks.append(self.get_all_messages(entity, only_circles=True))
            else:
                tasks.append(self.get_all_messages(entity))

        results = await asyncio.gather(*tasks, return_exceptions=True)

        for i, key in enumerate(self.channel_entities.keys()):
            result = results[i]
            try:
                if isinstance(result, Exception):
                    raise result
                if key == "–∫—Ä—É–∂–æ–∫":
                    self.circles_cache = result
                else:
                    self.memes_cache[key] = result
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.config['channel_mapping'].get(key, 'Unknown')}")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.config['channel_mapping'].get(key, 'Unknown')}: {e}")

    async def get_all_messages(self, peer, only_circles=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        all_messages = []
        offset_id = 0
        try:
            while True:
                messages = await self.client(
                    GetHistoryRequest(
                        peer=peer,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        limit=100,
                        max_id=0,
                        min_id=0,
                        hash=0,
                    )
                )
                if not messages.messages:
                    break
                all_messages.extend(messages.messages)
                if len(messages.messages) < 100:
                    break
                offset_id = messages.messages[-1].id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {peer}: {e}")

        if only_circles:
            return [m for m in all_messages if hasattr(m, 'video_note') and m.video_note is not None]
        else:
            return all_messages

    async def get_random_post(self, category):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if category not in self.memes_cache or not self.memes_cache[category]:
                logger.warning(f"–ö—ç—à –º–µ–º–æ–≤ –¥–ª—è {category} –ø—É—Å—Ç.")
                return None

            channel_posts = self.memes_cache[category]
            if category not in self.sent_post_ids:
                self.sent_post_ids[category] = []

            available_posts = [p for p in channel_posts if p.id not in self.sent_post_ids[category]]

            if not available_posts:
                logger.info(f"–í—Å–µ –º–µ–º—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ {category} –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫.")
                self.sent_post_ids[category] = []
                available_posts = channel_posts 

                if not available_posts:
                    logger.warning(f"–ö–∞–Ω–∞–ª {category} –ø—É—Å—Ç–æ–π.")
                    return None  

            post = random.choice(available_posts)
            self.sent_post_ids[category].append(post.id)  
            self.save_data()  
            return post
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {category}: {e}")
            return None

    async def get_random_circle(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞"""
        try:
            if not self.circles_cache:
                logger.warning("–ö—ç—à –∫—Ä—É–∂–∫–æ–≤ –ø—É—Å—Ç.")
                return None

            filtered_circles = [
                c for c in self.circles_cache if c.id not in self.sent_circle_ids
            ]
            if not filtered_circles:
                logger.info("–í—Å–µ –∫—Ä—É–∂–∫–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.  –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫.")
                self.sent_circle_ids = set()
                filtered_circles = [
                    c for c in self.circles_cache if c.id not in self.sent_circle_ids
                ]
                if not filtered_circles:
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤.")
                    return None

            circle = random.choice(filtered_circles)
            self.sent_circle_ids.add(circle.id)
            self.save_data()
            return circle
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞: {e}")
            return None

    async def send_random_post(self, message, category, request_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_username = self.config["channel_mapping"].get(category)
            if not channel_username:
                await utils.answer(message, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            loading_emoji = random.choice(self.config["loading_emojis"])
            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,
                    self.strings["processing_message"].format(request_type=request_type, loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)

            post = await self.get_random_post(category)
            if post:
                random_emoji = random.choice(self.config["emojis"])
                text = post.message or ""
                new_text = f"<emoji document_id={random_emoji}>{chr(0x200d)}</emoji> <b>{request_type}</b>\n\n{text}"

                await self.client.send_message(
                    message.chat_id,
                    new_text,
                    file=post.media if hasattr(post, "media") else None,
                    reply_to=message.reply_to_msg_id,
                )
                await message.delete()

            else:
                try:
                    await self.client.edit_message(
                        message.chat_id,
                        message.id,
                        self.strings["all_memes_shown"]
                    )
                except MessageNotModifiedError:
                    pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {category}: {e}")

    async def send_random_circle(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞"""
        try:
            entity = self.channel_entities.get("–∫—Ä—É–∂–æ–∫")
            if not entity:
                await utils.answer(message, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª —Å –∫—Ä—É–∂–∫–∞–º–∏.")
                return

            loading_emoji = random.choice(self.config["loading_emojis"])

            try:
                await self.client.edit_message(
                    message.chat_id,
                    message.id,
                    self.strings["sending_circle"].format(loading_emoji=loading_emoji)
                )
            except MessageNotModifiedError:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)

            circle = await self.get_random_circle()
            if circle:
                await self.client.send_message(
                    message.chat_id,
                    file=circle.video_note,
                    reply_to=message.reply_to_msg_id,
                )
                await message.delete()

            else:
                await utils.answer(message, self.strings["no_circles"])

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞: {e}")

    async def count_posts(self, category):
        """–ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
        if category not in self.memes_cache:
            return 0
        return len(self.memes_cache[category])

    async def count_circles(self):
        """–ü–æ–¥—Å—á–µ—Ç –∫—Ä—É–∂–∫–æ–≤"""
        return len(self.circles_cache)

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —à—É—Ç–∫–∞(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "—à—É—Ç–∫–∞", "—à—É—Ç–∫–∞")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∂–µ—Å—Ç–∫–∏–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∂–æ—Å–∫–∏–π–º–µ–º(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∂–µ—Å—Ç–∫–∏–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "–∂–æ—Å–∫–∏–π–º–µ–º", "–∂–µ—Å—Ç–∫–∏–π –º–µ–º")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—à–Ω–æ–π–º–µ–º(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "—Å–º–µ—à–Ω–æ–π–º–µ–º", "—Å–º–µ—à–Ω–æ–π –º–µ–º")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–º–µ—à–Ω—É—é –≤—Å—è—á–∏–Ω—É –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def —Å–º–µ—Ö—É—è—Ç–∏–Ω–∞(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–º–µ—à–Ω—É—é –≤—Å—è—á–∏–Ω—É –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞", "—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∞–Ω–µ–∫–¥–æ—Ç(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_post(message, "–∞–Ω–µ–∫–¥–æ—Ç", "–∞–Ω–µ–∫–¥–æ—Ç")

    @loader.command(ru_doc="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞")
    async def –∫—Ä—É–∂–æ–∫(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await self.send_random_circle(message)

    @loader.command(ru_doc="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤")
    async def –º–µ–º–ª–∏—Å—Ç(self, message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤"""
        try:
            jokes_count = await self.count_posts("—à—É—Ç–∫–∞")
            hard_memes_count = await self.count_posts("–∂–æ—Å–∫–∏–π–º–µ–º")
            funny_memes_count = await self.count_posts("—Å–º–µ—à–Ω–æ–π–º–µ–º")
            funny_stuff_count = await self.count_posts("—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
            anecdotes_count = await self.count_posts("–∞–Ω–µ–∫–¥–æ—Ç")
            circles_count = await self.count_circles()

            await utils.answer(
                message,
                self.strings["memelist_message"].format(
                    jokes_count=jokes_count,
                    hard_memes_count=hard_memes_count,
                    funny_memes_count=funny_memes_count,
                    funny_stuff_count=funny_stuff_count,
                    anecdotes_count=anecdotes_count,
                    circles_count=circles_count,
                ),
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–º–æ–≤: {e}")
            await utils.answer(message, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–º–æ–≤.</b>")

    @loader.command(ru_doc="–æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤")
    async def –æ–±–Ω–æ–≤–∏—Ç—å–∫–µ—à(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–µ–º–æ–≤"""
        try:
            # Get current counts
            jokes_count = await self.count_posts("—à—É—Ç–∫–∞")
            hard_memes_count = await self.count_posts("–∂–æ—Å–∫–∏–π–º–µ–º")
            funny_memes_count = await self.count_posts("—Å–º–µ—à–Ω–æ–π–º–µ–º")
            funny_stuff_count = await self.count_posts("—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
            anecdotes_count = await self.count_posts("–∞–Ω–µ–∫–¥–æ—Ç")
            circles_count = await self.count_circles()

            await self.cache_all_messages()

            # Get new counts
            new_jokes_count = await self.count_posts("—à—É—Ç–∫–∞")
            new_hard_memes_count = await self.count_posts("–∂–æ—Å–∫–∏–π–º–µ–º")
            new_funny_memes_count = await self.count_posts("—Å–º–µ—à–Ω–æ–π–º–µ–º")
            new_funny_stuff_count = await self.count_posts("—Å–º–µ—Ö—É—è—Ç–∏–Ω–∞")
            new_anecdotes_count = await self.count_posts("–∞–Ω–µ–∫–¥–æ—Ç")
            new_circles_count = await self.count_circles()

            # Calculate added counts
            jokes_added = new_jokes_count - jokes_count
            hard_memes_added = new_hard_memes_count - hard_memes_count
            funny_memes_added = new_funny_memes_count - funny_memes_count
            funny_stuff_added = new_funny_stuff_count - funny_stuff_count
            anecdotes_added = new_anecdotes_count - anecdotes_count
            circles_added = new_circles_count - circles_count

            try:
                await utils.answer(
                    message,
                    self.strings["cache_updated"].format(
                        jokes_added=jokes_added,
                        hard_memes_added=hard_memes_added,
                        funny_memes_added=funny_memes_added,
                        funny_stuff_added=funny_stuff_added,
                        anecdotes_added=anecdotes_added,
                        circles_added=circles_added,
                    ),
                )
            except MessageNotModifiedError:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å).")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞: {e}")
            await utils.answer(message, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞.</b>")
